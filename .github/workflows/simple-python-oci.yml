# Simplified Python Package OCI Build
# Works with ANY Python package that can be run with: python -m package_name

name: Simple Python OCI Build

on:
  push:
    tags: ["v*"]
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  REPOSITORY: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python and uv
        uses: astral-sh/setup-uv@v3

      - name: Build wheel
        run: uv build --wheel --out-dir dist/

      - name: Setup Golang
        uses: actions/setup-go@v6
        with:
          go-version: "1.24"

      - name: Install Genval
        run: |
          go install github.com/intelops/genval@pre-main

      - name: Create simple runner
        run: |
          # Extract package name from wheel
          WHEEL=$(ls dist/*.whl | head -1)
          PACKAGE_NAME=$(basename "$WHEEL" | cut -d'-' -f1 | tr '-' '_')

          # Create a simple run script
          cat > dist/run.sh << 'EOF'
          #!/bin/bash
          # Simple Python package runner
          WHEEL=$(ls "$(dirname "$0")"/*.whl | head -1)
          PKG=$(basename "$WHEEL" | cut -d'-' -f1 | tr '-' '_')

          # Install and run
          pip install "$WHEEL" --quiet
          python -m "$PKG" "$@"
          EOF
          chmod +x dist/run.sh

          # Create metadata
          echo "{\"package\": \"$PACKAGE_NAME\", \"wheel\": \"$(basename $WHEEL)\"}" > dist/metadata.json

      - name: Push OCI artifact
        id: push
        run: |
          # Push OCI artifact using genval (expects directory, not tar)
          TAG="${GITHUB_REF_NAME:-latest}"
          IMAGE_URI="${{ env.REGISTRY }}/${{ env.REPOSITORY }}:$TAG"

          # genval expects oci:// prefix for push
          OUTPUT=$(genval artifact push --reqinput dist \
          --dest "oci://$IMAGE_URI" \
          --annotations="author=capten.ai" 2>&1)

          echo "$OUTPUT"
          
          # Extract digest from genval output
          DIGEST=$(echo "$OUTPUT" | grep -oP 'sha256:[a-f0-9]{64}' | head -1)
          
          echo "âœ… Pushed to: $IMAGE_URI"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_OUTPUT
          echo "IMAGE_DIGEST=${{ env.REGISTRY }}/${{ env.REPOSITORY }}@$DIGEST" >> $GITHUB_OUTPUT

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign Artifact with Cosign
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          echo "Signing artifact ${{ steps.push.outputs.IMAGE_DIGEST }}"
          # Sign using digest instead of tag to avoid timeout issues
          cosign sign --yes ${{ steps.push.outputs.IMAGE_DIGEST }}
