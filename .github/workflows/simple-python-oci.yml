# Simplified Python Package OCI Build
# Works with ANY Python package that can be run with: python -m package_name

name: Simple Python OCI Build

on:
  push:
    tags: ["v*"]
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  REPOSITORY: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python and uv
        uses: astral-sh/setup-uv@v3

      - name: Build wheel
        run: uv build --wheel --out-dir dist/

      - name: Setup Golang
        uses: actions/setup-go@v6
        with:
          go-version: "1.24"

      - name: Install Genval
        run: |
          go install github.com/intelops/genval@pre-main

      - name: Create simple runner
        run: |
          # Extract package name from wheel
          WHEEL=$(ls dist/*.whl | head -1)
          PACKAGE_NAME=$(basename "$WHEEL" | cut -d'-' -f1 | tr '-' '_')

          # Create a simple run script
          cat > dist/run.sh << 'EOF'
          #!/bin/bash
          # Simple Python package runner
          WHEEL=$(ls "$(dirname "$0")"/*.whl | head -1)
          PKG=$(basename "$WHEEL" | cut -d'-' -f1 | tr '-' '_')

          # Install and run
          pip install "$WHEEL" --quiet
          python -m "$PKG" "$@"
          EOF
          chmod +x dist/run.sh

          # Create metadata
          echo "{\"package\": \"$PACKAGE_NAME\", \"wheel\": \"$(basename $WHEEL)\"}" > dist/metadata.json

          # Login to registry
          echo "${{ secrets.GITHUB_TOKEN }}" | oras login ghcr.io -u ${{ github.actor }} --password-stdin

          # Create and push bundle
          cd dist
          tar czf bundle.tar.gz *.whl run.sh metadata.json


          # Push OCI artifact
          TAG="${GITHUB_REF_NAME:-latest}"
          genval artifact push --reqinput bundle.tar.gz \
          --dest "${{ env.REGISTRY }}/${{ env.REPOSITORY }}:$TAG" \
          --annotation="author=capten.ai"

          echo "âœ… Pushed to: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:$TAG"
          echo "Pull with: oras pull ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:$TAG"

