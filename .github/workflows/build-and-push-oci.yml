name: Build and Push OCI Artifact

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      registry:
        description: 'Container registry URL'
        required: true
        default: 'ghcr.io'
      repository:
        description: 'Repository name'
        required: true
        default: 'capten-ai/mise-tasks-mcp'

env:
  REGISTRY: ${{ github.event.inputs.registry || 'ghcr.io' }}
  REPOSITORY: ${{ github.event.inputs.repository || github.repository }}
  PYTHON_VERSION: '3.12'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: mise-tasks-mcp-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact: mise-tasks-mcp-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: mise-tasks-mcp-darwin-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: mise-tasks-mcp-darwin-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: mise-tasks-mcp-windows-amd64.exe
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Create virtual environment and install dependencies
        run: |
          uv venv
          uv pip install -e .
          uv pip install --upgrade pip setuptools wheel

      - name: Build standalone executable with uv
        run: |
          # Create a standalone Python application using uv
          uv tool install --python ${{ env.PYTHON_VERSION }} .
          
          # Package the application into a standalone binary
          uv build --wheel
          
          # Create a self-contained executable using uv's bundling
          mkdir -p dist/bin
          
          # Create launcher script
          cat > dist/bin/mise-tasks-mcp << 'EOF'
          #!/usr/bin/env python3
          import sys
          import os
          sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
          from mise_tasks_mcp.server import main
          if __name__ == "__main__":
              main()
          EOF
          
          chmod +x dist/bin/mise-tasks-mcp
          
          # Bundle with uv (create a zipapp)
          python -m zipapp src \
            --python "/usr/bin/env python3" \
            --main "mise_tasks_mcp.server:main" \
            --output dist/${{ matrix.platform.artifact }} \
            --compress

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.artifact }}
          path: dist/${{ matrix.platform.artifact }}

  push-oci:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Install ORAS CLI
        run: |
          VERSION="1.2.0"
          curl -LO "https://github.com/oras-project/oras/releases/download/v${VERSION}/oras_${VERSION}_linux_amd64.tar.gz"
          mkdir -p oras-install/
          tar -zxf oras_${VERSION}_*.tar.gz -C oras-install/
          sudo mv oras-install/oras /usr/local/bin/
          rm -rf oras_${VERSION}_*.tar.gz oras-install/

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare metadata
        id: meta
        run: |
          # Generate version tag
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          else
            VERSION=sha-${GITHUB_SHA::8}
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "timestamp=$(date -u +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: Push executables as OCI artifacts using ORAS
        run: |
          # Create manifest annotations
          cat > annotations.json << EOF
          {
            "org.opencontainers.image.title": "mise-tasks-mcp",
            "org.opencontainers.image.description": "MCP server for mise tasks and configuration management",
            "org.opencontainers.image.version": "${{ steps.meta.outputs.version }}",
            "org.opencontainers.image.created": "$(date -u +'%Y-%m-%dT%H:%M:%SZ')",
            "org.opencontainers.image.source": "${{ github.server_url }}/${{ github.repository }}",
            "org.opencontainers.image.revision": "${{ github.sha }}",
            "org.opencontainers.image.vendor": "Capten.ai",
            "org.opencontainers.image.authors": "Capten.ai and Contributors",
            "org.opencontainers.image.licenses": "MIT"
          }
          EOF
          
          # Push each platform binary as a blob
          for artifact_dir in artifacts/*/; do
            if [ -d "$artifact_dir" ]; then
              artifact_name=$(basename "$artifact_dir")
              binary_file=$(find "$artifact_dir" -type f -name "mise-tasks-mcp*" | head -1)
              
              if [ -f "$binary_file" ]; then
                echo "Pushing $artifact_name to registry..."
                
                # Determine platform from artifact name
                case "$artifact_name" in
                  *linux-amd64*)
                    platform="linux/amd64"
                    ;;
                  *linux-arm64*)
                    platform="linux/arm64"
                    ;;
                  *darwin-amd64*)
                    platform="darwin/amd64"
                    ;;
                  *darwin-arm64*)
                    platform="darwin/arm64"
                    ;;
                  *windows-amd64*)
                    platform="windows/amd64"
                    ;;
                  *)
                    platform="unknown"
                    ;;
                esac
                
                # Push blob with ORAS
                oras blob push \
                  ${{ env.REGISTRY }}/${{ env.REPOSITORY }}-${artifact_name}:${{ steps.meta.outputs.version }} \
                  --file "$binary_file" \
                  --media-type "application/vnd.oci.image.layer.v1.tar+gzip" \
                  --annotation "org.opencontainers.image.platform=${platform}" \
                  --annotation "org.opencontainers.image.title=mise-tasks-mcp-${artifact_name}" \
                  --annotation "org.opencontainers.image.version=${{ steps.meta.outputs.version }}"
                
                # Also push with 'latest' tag for main branch
                if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
                  oras blob push \
                    ${{ env.REGISTRY }}/${{ env.REPOSITORY }}-${artifact_name}:latest \
                    --file "$binary_file" \
                    --media-type "application/vnd.oci.image.layer.v1.tar+gzip" \
                    --annotation "org.opencontainers.image.platform=${platform}" \
                    --annotation "org.opencontainers.image.title=mise-tasks-mcp-${artifact_name}"
                fi
              fi
            fi
          done

      - name: Create manifest list
        run: |
          # Create a manifest list linking all platform binaries
          echo "Creating OCI manifest list..."
          
          # This would require oras manifest commands or docker buildx
          # For now, we'll document the individual blob URLs
          cat > ARTIFACTS.md << EOF
          # OCI Artifacts for mise-tasks-mcp
          
          Version: ${{ steps.meta.outputs.version }}
          
          ## Available Binaries
          
          ### Linux AMD64
          \`\`\`bash
          oras blob fetch ${{ env.REGISTRY }}/${{ env.REPOSITORY }}-linux-amd64:${{ steps.meta.outputs.version }} --output mise-tasks-mcp
          chmod +x mise-tasks-mcp
          \`\`\`
          
          ### Linux ARM64
          \`\`\`bash
          oras blob fetch ${{ env.REGISTRY }}/${{ env.REPOSITORY }}-linux-arm64:${{ steps.meta.outputs.version }} --output mise-tasks-mcp
          chmod +x mise-tasks-mcp
          \`\`\`
          
          ### macOS AMD64
          \`\`\`bash
          oras blob fetch ${{ env.REGISTRY }}/${{ env.REPOSITORY }}-darwin-amd64:${{ steps.meta.outputs.version }} --output mise-tasks-mcp
          chmod +x mise-tasks-mcp
          \`\`\`
          
          ### macOS ARM64
          \`\`\`bash
          oras blob fetch ${{ env.REGISTRY }}/${{ env.REPOSITORY }}-darwin-arm64:${{ steps.meta.outputs.version }} --output mise-tasks-mcp
          chmod +x mise-tasks-mcp
          \`\`\`
          
          ### Windows AMD64
          \`\`\`bash
          oras blob fetch ${{ env.REGISTRY }}/${{ env.REPOSITORY }}-windows-amd64:${{ steps.meta.outputs.version }} --output mise-tasks-mcp.exe
          \`\`\`
          EOF

      - name: Upload fetch instructions
        uses: actions/upload-artifact@v4
        with:
          name: fetch-instructions
          path: ARTIFACTS.md